spring:
  datasource:
    url: jdbc:postgresql://ec2-3-223-21-106.compute-1.amazonaws.com:5432/deb47u8n0v5g1g
    username: plhfiwgrqjhoba
    password: bd974e99a28e34bc6d7b51f02b741fe76bd755da7f72449ffaa7ebf32fda90f6

  jpa:
    show-sql: true
    hibernate:
      ddl-auto: update
      naming-strategy: org.hibernate.cfg.ImprovedNamingStrategy
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
  security:
    oauth2:
      client:
        registration:
          google:
            clientId: 519435970083-r9oa6c8hnft92eb0sanoqvrp5fnp06j0.apps.googleusercontent.com
            clientSecret: zI11pSBVj70_BldRbmqwMzjt
            redirectUri: "http://localhost:8080/oauth2/callback/google"
            scope:
              - email
              - profile
app:
  auth:
    tokenSecret: 926D96C90030DD58429D2751AC1BDBBC
    tokenExpirationMsec: 864000000
  oauth2:
    # After successfully authenticating with the OAuth2 Provider,
    # we'll be generating an auth token for the user and sending the token to the
    # redirectUri mentioned by the frontend client in the /oauth2/authorize request.
    # We're not using cookies because they won't work well in mobile clients.
    authorizedRedirectUris:
      - https://shrouded-crag-75617.herokuapp.com/oauth2/redirect
      - myandroidapp://oauth2/redirect
      - myiosapp://oauth2/redirect